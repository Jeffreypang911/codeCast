{
  "e2a47200-d83e-11e8-b410-879561d31848": "# Final Project\n\n## Add to this README if you make changes we all need to know about\n\n## To set up:\n- Fork and clone this repo\n- Run `npm run install-all` in root directory\n- For development, run `npm start` in the **ROOT DIRECTORY**. This will run the react scripts in `/client` and the server in `/server/server.js`\n- **COMMIT OFTEN AND ATOMICALLY**. Focus on one component at a time. \n- Load the component you're working on in to App.jsx inside the empty div. This will render it on `localhost:3000` for you to reference. Nodemon will update any time you make changes.\n- **DO NOT MAKE CHANGES TO THE SERVER WITHOUT CONFIRMING WITH BENJI PLS**",
  "e2a50e40-d83e-11e8-b410-879561d31848": "{\n    \"env\": {\n        \"browser\": true,\n        \"commonjs\": true,\n        \"es6\": true,\n        \"node\": true\n    },\n    \"extends\": \"eslint:recommended\",\n    \"parser\": \"babel-eslint\",\n    \"parserOptions\": {\n        \"ecmaFeatures\": {\n            \"jsx\": true\n        },\n        \"ecmaVersion\": 2018,\n        \"sourceType\": \"module\"\n    },\n    \"plugins\": [\n        \"react\"\n    ],\n    \"rules\": {\n        \"indent\": [\n            \"error\",\n            [2, 2]\n        ],\n        \"linebreak-style\": [\n            \"error\",\n            \"unix\"\n        ],\n        \"quotes\": [\n            \"error\",\n            \"single\"\n        ],\n        \"semi\": [\n            \"error\",\n            \"always\"\n        ]\n    }\n}",
  "e2a53550-d83e-11e8-b410-879561d31848": "{\n  \"name\": \"final-project\",\n  \"jest\": {\n    \"collectCoverageFrom\": [\n      \"src/**/*.{js,jsx}\",\n      \"!<rootDir>/node_modules/\"\n    ]\n  },\n  \"version\": \"0.1.0\",\n  \"private\": true,\n  \"main\": \"./src/electron-main/electron-main.js\",\n  \"dependencies\": {\n    \"electron\": \"^3.0.5\",\n    \"electron-is-dev\": \"^1.0.1\",\n    \"electron-next\": \"^3.1.5\",\n    \"antd\": \"^3.10.1\",\n    \"bluebird\": \"^3.5.2\",\n    \"pm2\": \"~3.2.2\",\n    \"prop-types\": \"~15.6.2\",\n    \"react\": \"^16.5.2\",\n    \"react-codemirror2\": \"~5.1.0\",\n    \"react-dom\": \"^16.5.2\",\n    \"react-redux\": \"~5.0.7\",\n    \"react-router-dom\": \"~4.3.1\",\n    \"react-scripts\": \"2.0.5\",\n    \"redux\": \"~4.0.1\",\n    \"redux-socket.io\": \"~1.4.0\",\n    \"socket.io-client\": \"~2.1.1\",\n    \"uuid\": \"~3.3.2\"\n  },\n  \"proxy\": \"http://localhost:8080\",\n  \"scripts\": {\n    \"electron\": \"electron ./src/electron-main/electron-starter\",\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n    \"test\": \"react-scripts test\",\n    \"eject\": \"react-scripts eject\",\n    \"sass\": \"sass --watch src/styles/scss:src/styles/css\",\n    \"sass:build\": \"sass — update src/styles/scss:src/styles/css\"\n  },\n  \"eslintConfig\": {\n    \"extends\": \"react-app\"\n  },\n  \"browserslist\": [\n    \">0.2%\",\n    \"not dead\",\n    \"not ie <= 11\",\n    \"not op_mini all\"\n  ],\n  \"devDependencies\": {\n    \"next\": \"^7.0.2\",\n    \"node-sass\": \"~4.9.4\"\n  }\n}\n",
  "e2a53551-d83e-11e8-b410-879561d31848": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <link rel=\"shortcut icon\" href=\"./favicon.ico\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\">\n    <meta name=\"theme-color\" content=\"#000000\">\n    <!--\n      manifest.json provides metadata used when your web app is added to the\n      homescreen on Android. See https://developers.google.com/web/fundamentals/web-app-manifest/\n    -->\n    <link rel=\"manifest\" href=\"%PUBLIC_URL%/manifest.json\">\n    <!--\n      Notice the use of %PUBLIC_URL% in the tags above.\n      It will be replaced with the URL of the `public` folder during the build.\n      Only files inside the `public` folder can be referenced from the HTML.\n\n      Unlike \"/favicon.ico\" or \"favicon.ico\", \"%PUBLIC_URL%/favicon.ico\" will\n      work correctly both with client-side routing and a non-root public URL.\n      Learn how to configure a non-root public URL by running `npm run build`.\n    -->\n    <title>React App</title>\n  </head>\n  <body>\n    <noscript>\n      You need to enable JavaScript to run this app.\n    </noscript>\n    <div id=\"root\"></div>\n    <!--\n      This HTML file is a template.\n      If you open it directly in the browser, you will see an empty page.\n\n      You can add webfonts, meta tags, or analytics to this file.\n      The build step will place the bundled scripts into the <body> tag.\n\n      To begin the development, run `npm start` or `yarn start`.\n      To create a production bundle, use `npm run build` or `yarn build`.\n    -->\n  </body>\n</html>\n",
  "e2a6bbf0-d83e-11e8-b410-879561d31848": "{\n  \"short_name\": \"React App\",\n  \"name\": \"Create React App Sample\",\n  \"icons\": [\n    {\n      \"src\": \"favicon.ico\",\n      \"sizes\": \"64x64 32x32 24x24 16x16\",\n      \"type\": \"image/x-icon\"\n    }\n  ],\n  \"start_url\": \".\",\n  \"display\": \"standalone\",\n  \"theme_color\": \"#000000\",\n  \"background_color\": \"#ffffff\"\n}\n",
  "e2a6bbf1-d83e-11e8-b410-879561d31848": "import React, { Component } from 'react';\n\nimport { connect } from 'react-redux';\n\n//components\n\nimport Chat from './StreamComponents/Chat/ChatMain';\nimport LiveCodeDisplay from './StreamComponents/FileDisplay/LiveCodeDisplay.jsx';\nimport Video from './StreamComponents/VideoStream/VideoStream.jsx';\nimport Terminal from './StreamComponents/Terminal/Terminal.jsx';\nimport FileDirectory from './StreamComponents/FileDirectory/FileDirectory.jsx'\n//\n// import logo from './assets/logo.svg';\n\nclass App extends Component {\n  \n  \n  render() {\n    return (\n      <div className=\"App\">\n\n        <div className='component-container1'>\n          <div className=\"Filetree-display\">\n            <FileDirectory />\n          </div>\n          <div className=\"Video-display\">\n            <Video />\n          </div>\n          <div className=\"Chat-display\">\n            <Chat />\n          </div>\n        </div>\n\n        <div className=\"component-container2\">\n          <div className=\"Code-display\">\n            <LiveCodeDisplay />\n          </div>\n          <div className=\"Terminal-display\">\n            <Terminal />\n          </div>\n        </div>\n\n\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    state\n    //state mapping here    \n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    dispatch\n    //dispatch actions here\n  };   \n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n\n\n",
  "e2a6e300-d83e-11e8-b410-879561d31848": "import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Root from './Root';\nimport store from './redux/store/index.js';\n\nit('renders without crashing', () => {\n  if (global.document) {\n    document.createRange = () => ({\n      setStart: () => {},\n      setEnd: () => {},\n      commonAncestorContainer: {\n        nodeName: 'BODY',\n        ownerDocument: document,\n      },\n    });\n    document.body.createTextRange = () => ({\n      setStart: () => {},\n      setEnd: () => {},\n      commonAncestorContainer: {\n        nodeName: 'BODY',\n        ownerDocument: document,\n      },\n    });\n  }\n  const div = document.createElement('div');\n  ReactDOM.render(<Root store={ store } />, div);\n  ReactDOM.unmountComponentAtNode(div);\n});\n",
  "e2a6e301-d83e-11e8-b410-879561d31848": "import React from 'react'\nimport { NavLink } from 'react-router-dom'\n\nconst FilterLink = ({ filter, children }) => (\n  <NavLink\n    to={ filter === 'SHOW_ALL' ? '/' : `/${filter}` }\n    activeStyle={{\n      textDecoration: 'none',\n      color: 'black'\n    }}\n  >\n    { children }\n  </NavLink>\n)\n\nexport default FilterLink",
  "e2a70a10-d83e-11e8-b410-879561d31848": "import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { INCREMENT } from '../../redux/actions/index';\n\n//boilerplate for component to access redux\n\nfunction ReactComponent(props) {\n  //component to use/update redux state\n  return (\n    <button onClick=\"() => props.incrementCounter(9)\">im some stuff. state:{props.counter}</button>\n  )\n}\n\n\n\n\n\n\n\n\n\n\n\n\nfunction mapStateToProps(state) {\n  return {\n    counter: state.counter  \n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    incrementCounter: (number) => dispatch(INCREMENT(number))\n  };   \n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ReactComponent);\n",
  "e2a70a11-d83e-11e8-b410-879561d31848": "import React from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport { PropTypes } from 'prop-types';\nimport { Provider } from 'react-redux';\nimport App from './App';\n\nconst Root = ({ store }) => (\n  <Provider store={ store }>\n    <Router>\n      <Route path=\"/:filter?\" component={App} />\n    </Router>\n  </Provider>\n);\n\nRoot.propTypes = {\n  store: PropTypes.object.isRequired\n};\n\nexport default Root;",
  "e2a70a12-d83e-11e8-b410-879561d31848": "import React from 'react';\n\nfunction Chatbar ({ addMessage, updateCurrentUser, currentUser }) {\n\n  let textInput = React.createRef();\n\n  function submitMessage(content) {\n    addMessage(content);\n  }\n  function updateUser(user) {\n    updateCurrentUser(user);\n  }\n  function focusOnSubmit() {\n    textInput.current.focus();\n  }\n  function handleEnter(event) {\n    if (event.key === 'Enter') {\n      let content = event.target.value;\n      if(content.length > 0) {\n        if (event.target.name === 'msgInput') {\n          submitMessage(content);\n          event.target.value = '';\n        } else if (event.target.name === 'usernameInput') {\n          if (content !== currentUser) {\n            updateUser(content);\n          }\n          focusOnSubmit();\n        }\n      }\n    }\n  }\n  return (\n    <div className=\"chatbar\">\n      <input name=\"usernameInput\" className=\"chatbar-username\" onKeyDown={ handleEnter } defaultValue={ currentUser } />\n      <input name=\"msgInput\" className=\"chatbar-message\" onKeyDown={ handleEnter } ref={ textInput } placeholder=\"Type a message and hit ENTER\" />\n    </div>\n  );\n}\n\nexport default Chatbar;",
  "e2a73120-d83e-11e8-b410-879561d31848": "import React, { Component } from 'react';\nimport Messages from './Message.jsx';\nimport MessageList from './MessageList.jsx';\nimport Chatbar from './ChatBar.jsx';\nimport { messages, notifications } from './dummyMessages/messages.json';\nimport uuid from 'uuid/v1';\nimport { connect } from 'react-redux';\nimport { newConnection, newMessage } from '../../redux/actions/index';\nimport store from '../../redux/store/index.js';\n\nconst mapDispatchToProps = (dispatch) => ({\n  sendMessage: (msg) => dispatch(newMessage(msg)),\n  alertConnection: () => dispatch(newConnection('New connection established from React')) \n});\n\nconst mapStateToProps = (state) => ({\n  messages: state.messages\n});\n\nclass Chat extends Component {\n  constructor() {\n    super();\n    this.state = {\n      currentUser: 'Anonymous',\n      userColor: '',\n      messages: messages,\n      notifications: notifications,\n      connections: 0\n    };\n  \n  }\n\n  updateState = (entry, data) => {\n    const newData = this.state[entry].concat(data);\n\n    this.setState({ [entry]: newData });\n  }\n\n  generateRandomHexColor = () => {\n    let decimal = Math.floor(Math.random()*16777215);\n\n    let hex = (decimal < (200 * 200 * 200) && decimal > (30 * 30 * 30)) \n      ? decimal.toString(16) : this.generateRandomHexColor();\n    \n    this.setState({ userColor: `#${hex}` });\n\n    return hex;\n  }\n\n  addMessage = (message) => {\n    const newMsg = {\n      type: 'messages',\n      id: uuid(),\n      timestamp: new Date(),\n      user: { username: this.state.currentUser, userColor: this.state.userColor },\n      content: message\n    };\n    this.props.sendMessage(newMsg);\n    this.setState({ messages: this.state.messages.concat(newMsg)});\n  }\n\n  addNotification = (notification) => {\n    const newNote = {\n      type: 'notifications',\n      id: uuid(),\n      timestamp: new Date(),\n      content: notification\n    };\n    this.props.sendMessage(newNote);\n    this.setState({ notifications: this.state.notifications.concat(newNote) });\n  }\n\n  updateCurrentUser = (user) => {\n    const oldUsername = this.state.currentUser;\n    \n    this.setState({ 'currentUser': user }, () => {\n      this.addNotification(`'${oldUsername}' changed their name to '${this.state.currentUser}'`);\n    }); \n  }\n\n  componentDidMount() {\n    this.generateRandomHexColor();\n    this.props.alertConnection();\n    console.log(store.getState());\n    \n  }\n\n  render() {\n    return (\n      <div className='chat-main'>\n        <div className='chat-container'>\n          <Messages>\n            <MessageList uuid={ uuid } \n              images={ this.state.images } \n              notifications={ this.state.notifications } \n              messages={ this.state.messages } \n            />\n            <Chatbar addMessage={ this.addMessage } \n              updateCurrentUser={ this.updateCurrentUser } \n              currentUser={ this.state.currentUser } \n            />\n          </Messages>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Chat);\n",
  "e2a73121-d83e-11e8-b410-879561d31848": "import React from 'react';\n\nfunction Messages ({ children }) {\n  return (\n    <main className='messages-container'>\n      \n      <div className='message-system'>\n        { children }\n      </div>\n    </main>\n  );\n}\n\nexport default Messages;",
  "e2a75830-d83e-11e8-b410-879561d31848": "import React from 'react';\n\nfunction MessageList({ messages, notifications, uuid }) {\n  const elems = [...messages, ...notifications];\n\n  function isValidUrl(string) {\n    try {\n      new URL(`http://${string}`);\n    } catch (err) {\n      return false;\n    }\n    return true;\n  }\n\n  function wordParser(content) {\n    const re = /\\/(.*?)\\((.*?)\\)/;\n    try {\n      if (!content.match(re)) {\n        let err;\n        throw err;\n      }\n    } catch (err) {\n      return content;\n    }\n    const regexed = content.match(re);\n    const [, cmd, value] = regexed;\n\n    return { cmd, value };\n  }\n\n  const chatMap = {\n\n    'img': function (url) {\n      try {\n        if (!isValidUrl(url)) {\n          let err;\n          throw err;\n        }\n      } catch (err) {\n        return (undefined);\n      }\n      return (\n        <span key={uuid()}>\n          <br /><img key={uuid()} className='img-msg' src={url} /><br />\n        </span>\n      );\n    },\n\n    'link': function (url, content) {\n      try {\n        if (!isValidUrl(url)) {\n          let err;\n          throw err;\n        }\n      } catch (err) {\n        return (undefined);\n      }\n      return (\n        <a key={uuid()} href={`//${url}`}>{content || url} </a>\n      );\n    },\n\n    'bold': function (content) {\n      return (\n        <strong key={uuid()}>{content} </strong>\n      );\n    },\n\n    'ital': function (content) {\n      return (\n        <em key={uuid()}>{content} </em>\n      );\n    },\n\n    'under': function (content) {\n      return (\n        <u key={uuid()}>{content} </u>\n      );\n    }\n  };\n\n  elems.sort((a, b) => {\n    return new Date(a.timestamp) - new Date(b.timestamp);\n  });\n\n  const elemArr = elems.map(message => {\n    const { id, timestamp, content, user } = message;\n\n    let msgArr = content.split(/(?!\\(.*)\\s(?![^(]*?\\))/g);\n\n    const parsed = msgArr.map((word) => {\n      let parsedWord = wordParser(word);\n      if (parsedWord.cmd) {\n        let { cmd, value } = parsedWord;\n        let newVal;\n        if (cmd === 'link') {\n          newVal = value.split('; ');\n          let [url, name] = newVal;\n          return chatMap[cmd](url, name);\n        }\n        return chatMap[cmd](value);\n      }\n      return parsedWord + ' ';\n    });\n\n    const colorStyles = (user) ? { color: user.userColor } : { color: '#000000' };\n    return (\n      <div key={id.toString()} data-time={timestamp} className={`${message.type}`}>\n\n        {message.type === 'messages' &&\n          <div className='message-username' style={colorStyles}>\n            {user.username || 'Anonymous'}\n          </div>}\n\n        <div className={`${message.type}-content`}>\n          {message.type === 'messages' ? `$ ${parsed.join(' ')}` : parsed}\n        </div>\n\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"message-list-container\">\n      <div className=\"unreverse\">\n        {elemArr}\n      </div>\n    </div>\n  );\n}\n\nexport default MessageList;",
  "e2a75831-d83e-11e8-b410-879561d31848": "{\n  \"messages\": [\n    {\n      \"status\": \"incoming\",\n      \"id\": 1,\n      \"type\": \"messages\",\n      \"timestamp\": \"2018-10-03T02:03:09.970Z\",\n      \"content\": \"I won't be impressed with technology until I can download food.\",\n      \"user\": {\"username\": \"Anonymous1\", \"userColor\": \"#eac70d\"}\n    },\n    { \n      \"status\": \"incoming\",\n      \"id\": 3,\n      \"type\": \"messages\",\n      \"timestamp\": \"2018-10-03T02:03:41.864Z\",\n      \"content\": \"I wouldn't want to download Kraft Dinner. I'd be scared of cheese packet loss.\",\n      \"user\": {\"username\": \"Anonymous2\", \"userColor\": \"#6dc064\"}\n    },\n    {\n      \"status\": \"incoming\",\n      \"id\": 4,\n      \"type\": \"messages\",\n      \"timestamp\": \"2018-10-03T02:04:08.878Z\",\n      \"content\": \"...\",\n      \"user\": {\"username\": \"nomnom\", \"userColor\": \"#eac70d\"}\n    },\n    {\n      \"status\": \"incoming\",\n      \"id\": 5,\n      \"type\": \"messages\",\n      \"timestamp\": \"2018-10-03T02:04:26.796Z\",\n      \"content\": \"I'd love to download a fried egg, but I'm afraid encryption would scramble it\",\n      \"user\": {\"username\": \"Anonymous2\", \"userColor\": \"#6dc064\"}\n    },\n    {\n      \"status\": \"incoming\",\n      \"id\": 6,\n      \"type\": \"messages\",\n      \"timestamp\": \"2018-10-03T02:04:40.003Z\",\n      \"content\": \"This isn't funny. You're not funny\",\n      \"user\": {\"username\": \"nomnom\", \"userColor\": \"#eac70d\"}\n    }\n  ],\n  \"notifications\": [\n    {\n      \"status\": \"incoming\",\n      \"id\": 2,\n      \"type\": \"notifications\",\n      \"timestamp\": \"2018-10-03T02:03:22.954Z\",\n      \"content\": \"\\\"Anonymous1\\\" changed their name to \\\"nomnom\\\"\"\n    },\n    {\n      \"status\": \"incoming\",\n      \"id\": 7,\n      \"type\": \"notifications\",\n      \"timestamp\": \"2018-10-03T02:04:54.522Z\",\n      \"content\": \"\\\"Anonymous2\\\" changed their name to \\\"NotFunny\\\"\"\n    }\n  ]\n}",
  "e2a77f40-d83e-11e8-b410-879561d31848": "import React from 'react';\nimport { Tree } from 'antd';\nimport 'antd/dist/antd.css';\nimport { connect } from 'react-redux';\nimport { compareHashToServer } from '../../redux/actions/index.js';\n\nconst TreeNode = Tree.TreeNode;\n\nclass FileDirectory extends React.Component {\n\n  constructor() {\n    super();\n    this.state = {\n      fileDir: {\n        \"projectRoot\": {\n          \"firstDir\": {\n            \"test\": \"hashRef1\",\n            \"file2\": \"hashRef2\",\n            \"file3\": \"hashRef3\",\n      \n            \"firstSubDir\": {\n              \"file1\":\"hashRef\",\n              \"file2\":\"hashRef\",\n              \"file3\":\"hashRef\",\n      \n              \"firstNestedSubDir\": {\n                \"file1\":\"hashRef\",\n                \"file2\":\"hashRef\",\n                \"file3\":\"hashRef\"\n              },\n      \n              \"secondNestedSubDir\": {\n                \"file1\":\"hashRef\",\n                \"file2\":\"hashRef\",\n                \"file3\":\"hashRef\"\n              }\n            },\n            \"secondSubDir\": {\n              \"file1\":\"hashRef\",\n              \"file2\":\"hashRef\",\n              \"file3\":\"hashRef\",\n      \n              \"firstNestedSubDir\": {\n                \"file1\":\"hashRef\",\n                \"file2\":\"hashRef\",\n                \"file3\":\"hashRef\"\n              }\n            }\n          },\n          \"secondDir\": {\n            \"file1\":\"hashRef\",\n            \"file2\":\"hashRef\",\n            \"file3\":\"hashRef\"\n          },\n          \"thirdDir\": {\n            \"file1\":\"hashRef\",\n            \"file2\":\"hashRef\",\n            \"file3\":\"hashRef\"\n          }\n        }\n      }\n    };\n  }\n  \n  //tree click handler\n  onSelect = (selectedKeys, info) => {\n    console.log('selected', selectedKeys, info);\n    // if treeNode is a leaf, handle call render function\n    if (info.node.isLeaf() === true) {\n      // this.props.sendHash(info.selectedNodes[0].key);\n      console.log(info.selectedNodes[0].key);\n    }\n  }\n  // take in file object and create nested Tree nodes\n  buildTree = (treeFrom) => {\n   \n    let result = [];\n    const fileDir = treeFrom;\n    for (let file in fileDir) {\n      if (typeof fileDir[file] === 'string') {\n        result.push(<TreeNode \n          title={ file } \n          key={ fileDir[file] } \n        />)\n\n      } else if (typeof fileDir[file] === 'object') {\n        result.push(<TreeNode title={ file } key={ file + ((Math.random()*10).toString().slice(2,6)) }>\n          { this.buildTree(fileDir[file]) }\n        </TreeNode>)\n      }\n    }\n    return result;\n  }\n  \n  render() {\n    const fileDir = this.state.fileDir;\n    return (\n      <Tree\n        showLine\n        // defaultExpandedKeys={[0-0-0']}\n        onSelect={this.onSelect}\n      >\n        {this.buildTree(fileDir)}\n      </Tree>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    sendHash: (hash) => dispatch(compareHashToServer(hash))\n  }\n}\n\nexport default connect(null, mapDispatchToProps)(FileDirectory);\n\n\n",
  "e2a7cd60-d83e-11e8-b410-879561d31848": "import React, { Component } from 'react';  \nimport { connect } from 'react-redux';  \n\n//code mirror\nimport { UnControlled as CodeMirror }from 'react-codemirror2';  \nimport StyleList from './StyleDisplay.jsx';\n\n// syntax highlighting\nimport 'codemirror/mode/javascript/javascript.js';\nimport 'codemirror/mode/python/python.js';\n\n// add ons \nimport 'codemirror/addon/runmode/runmode'\nimport 'codemirror/mode/meta'\nimport 'codemirror/mode/javascript/javascript'\nimport 'codemirror/addon/selection/active-line.js';\nimport 'codemirror/addon/edit/matchbrackets.js';\nimport 'codemirror/addon/edit/closetag.js';\n// import 'codemirror/addon/edit/matchtags.js';\n\n\nimport { updateFile, changeMirrorTheme } from '../../redux/actions/index';\n\nconst mapStateToProps = (state) => ({\n  theme: state.theme,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  updateFile: (file) => dispatch(updateFile(file)),\n  changeMirrorTheme: (theme) => dispatch(changeMirrorTheme(theme))\n});\n\nclass LiveCodeDisplay extends Component {  \n\n  constructor(props) {  \n    super(props); \n    this.state = {\n      mime: 'text/javascript',\n      theme: 'dracula',\n      activeFileContents: `var test = [1,2,3,4]; \\n    function stuff() {console.log(test)} `\n    };\n  }\n\n  changeDisplayTheme = evt => {\n    this.setState({ theme: evt.target.value.toLowerCase() });\n  }\n\n  render() {  \n\n    // codemirror options\n    const options = {\n      lineNumbers: true,\n      styleActiveLine: true,\n      matchBrackets: true,\n      mode: this.state.mime, // reference options in folder\n      theme: this.state.theme\n      //  readOnly: 'nocursor'\n    };\n\n    return (\n      <div className=\"file-container\">\n        <CodeMirror \n          value={ this.state.activeFileContents }\n          options={ options } \n          // value={this.state.code}\n        />\n      \n        <span className=\"theme-select-container\">\n          <p className=\"select-text\">Select a theme: </p>\n          <StyleList changeDisplayTheme={ this.changeDisplayTheme } />\n        </span>\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LiveCodeDisplay);",
  "e2a7cd61-d83e-11e8-b410-879561d31848": "import React from 'react';\n\n//themes\nimport 'codemirror/lib/codemirror.css';\nimport 'codemirror/theme/dracula.css';\nimport 'codemirror/theme/3024-day.css';\nimport 'codemirror/theme/3024-night.css';\nimport 'codemirror/theme/abcdef.css';\nimport 'codemirror/theme/ambiance.css';\nimport 'codemirror/theme/base16-dark.css';\nimport 'codemirror/theme/bespin.css';\nimport 'codemirror/theme/base16-light.css';\nimport 'codemirror/theme/blackboard.css';\nimport 'codemirror/theme/cobalt.css';\nimport 'codemirror/theme/colorforth.css';\nimport 'codemirror/theme/dracula.css';\nimport 'codemirror/theme/duotone-dark.css';\nimport 'codemirror/theme/duotone-light.css';\nimport 'codemirror/theme/eclipse.css';\nimport 'codemirror/theme/elegant.css';\nimport 'codemirror/theme/erlang-dark.css';\nimport 'codemirror/theme/gruvbox-dark.css';\nimport 'codemirror/theme/hopscotch.css';\nimport 'codemirror/theme/icecoder.css';\nimport 'codemirror/theme/isotope.css';\nimport 'codemirror/theme/lesser-dark.css';\nimport 'codemirror/theme/liquibyte.css';\nimport 'codemirror/theme/lucario.css';\nimport 'codemirror/theme/material.css';\nimport 'codemirror/theme/mbo.css';\nimport 'codemirror/theme/mdn-like.css';\nimport 'codemirror/theme/midnight.css';\nimport 'codemirror/theme/monokai.css';\nimport 'codemirror/theme/neat.css';\nimport 'codemirror/theme/neo.css';\nimport 'codemirror/theme/night.css';\nimport 'codemirror/theme/oceanic-next.css';\nimport 'codemirror/theme/panda-syntax.css';\nimport 'codemirror/theme/paraiso-dark.css';\nimport 'codemirror/theme/paraiso-light.css';\nimport 'codemirror/theme/pastel-on-dark.css';\nimport 'codemirror/theme/railscasts.css';\nimport 'codemirror/theme/rubyblue.css';\nimport 'codemirror/theme/seti.css';\nimport 'codemirror/theme/shadowfox.css';\nimport 'codemirror/theme/solarized.css';\nimport 'codemirror/theme/the-matrix.css';\nimport 'codemirror/theme/tomorrow-night-bright.css';\nimport 'codemirror/theme/tomorrow-night-eighties.css';\nimport 'codemirror/theme/ttcn.css';\nimport 'codemirror/theme/twilight.css';\nimport 'codemirror/theme/vibrant-ink.css';\nimport 'codemirror/theme/xq-dark.css';\nimport 'codemirror/theme/xq-light.css';\nimport 'codemirror/theme/yeti.css';\nimport 'codemirror/theme/idea.css';\nimport 'codemirror/theme/darcula.css';\nimport 'codemirror/theme/zenburn.css';\n\n\nconst styleOptions = ['3024-day','3024-night','abcdef','ambiance','base16-dark','base16-light','bespin',\n  'blackboard','cobalt','colorforth','darcula','dracula','duotone-dark','duotone-light','eclipse','elegant',\n  'erlang-dark','gruvbox-dark','hopscotch','icecoder','idea','isotope','lesser-dark','liquibyte','lucario',\n  'material','mbo','mdn-like','midnight','monokai','neat','neo','night','oceanic-next','panda-syntax',\n  'paraiso-dark','paraiso-light','pastel-on-dark','railscasts','rubyblue','seti','shadowfox','solarized dark',\n  'solarized light','the-matrix','tomorrow-night-bright','tomorrow-night-eighties','ttcn','twilight','vibrant-ink',\n  'xq-dark','xq-light','yeti','zenburn'];\n\nfunction StyleList({ changeDisplayTheme }) {\n\n  let styleElems = styleOptions.map((style) => {\n    let styleSplit = style.split('');\n    let capitalized = styleSplit[0].toUpperCase().concat(styleSplit.slice(1)).split(',').join('');\n\n    return (<option key={style} className={`editor-style-${style} style-option`}>{capitalized}</option>);\n  });\n\n  return (\n    <select className=\"theme-select\" defaultValue='dracula' onChange={ changeDisplayTheme } id='theme-select'>\n      {styleElems}\n    </select>\n  );\n  \n}\n\nexport default StyleList;",
  "e2a7f470-d83e-11e8-b410-879561d31848": "import React, { Component } from 'react';\n\nclass Terminal extends Component {\n  render() {\n    return (\n      <div className='terminal-main'>\n      </div>\n    );\n  };\n}\n\nexport default Terminal;",
  "e2a81b80-d83e-11e8-b410-879561d31848": "import React, { Component } from 'react';\n\nclass Video extends Component {\n  render() {\n    return (\n      <div className='video-main'>\n        <iframe className='iframe' src=\"https://www.youtube.com/embed/grEKMHGYyns\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen></iframe>\n      </div>\n    );\n  };\n}\n\nexport default Video;\n",
  "e2a84290-d83e-11e8-b410-879561d31848": "",
  "e2a84291-d83e-11e8-b410-879561d31848": "",
  "e2a869a0-d83e-11e8-b410-879561d31848": "",
  "e2a890b0-d83e-11e8-b410-879561d31848": "",
  "e2a8b7c0-d83e-11e8-b410-879561d31848": "",
  "e2ab01b0-d83e-11e8-b410-879561d31848": "import React from 'react';\nimport ReactDOM from 'react-dom';\nimport store from './redux/store/index.js';\nimport Root from './Root.jsx';\nimport * as serviceWorker from './serviceWorker.js';\nimport './styles/css/index.css';\n\nReactDOM.render(\n  <Root store={ store } />, \n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n",
  "e2ab28c0-d83e-11e8-b410-879561d31848": "function setFile(hash) {\n  return {\n    type: 'SET_FILE',\n    hash\n  }\n}\n\nfunction addFile(contents) {\n  return {\n    type: 'ADD_FILE',\n    contents\n  }\n}\n\nfunction fetchFile(hash) {\n  return (dispatch, getState) => {\n    const state = getState();\n\n    if (state.files[hash]) {\n      dispatch(setFile(hash));\n      return;\n    }\n    fetch('/' + hash)\n      .then(response => response.json)\n      .then(data => {\n        dispatch(addFile(data));\n        dispatch(setFile(hash));\n      })\n      .catch(error => dispatch(handleFileError(error)));\n    }\n    \n}\n\n  dispatch(fetchFile('abc'));\n\n  store => next => action => {\n    if (typeof action === 'function') {\n      action(store.dispatch, store.getState);\n      return;\n    }\n    next(action);\n  }",
  "e2ab28c1-d83e-11e8-b410-879561d31848": "function actionCreator(type, ...argNames) {\n  return function(...args) {\n    const action = { type };\n    argNames.forEach((arg, i) => {\n      action[argNames[i]] = args[i];\n    });\n    return action;\n  };\n}\n\nconst message = 'server/message';\nconst newConn = 'server/new_connection';\nconst fileChange = 'server/file_change';\nconst changeTheme = 'server/change_theme'; \nconst lookUpFileHash = 'server/look_up_file_hash';\n\nexport const newConnection = actionCreator(newConn, 'payload');\n\nexport const newMessage = actionCreator(message, 'payload');\n\nexport const updateFile = actionCreator(fileChange, 'payload');\n\nexport const changeMirrorTheme = actionCreator(changeTheme, 'payload');\n\n// export const getRequestedFile = actionCreator(getDisplayFile, hash);\n\nexport const compareHashToServer = (hash) => ({type: lookUpFileHash, payload: hash});\n\n",
  "e2ab4fd0-d83e-11e8-b410-879561d31848": "export default function (state = { activeFileContents: '', directoryStucture: {} } , action) {\n  switch (action.type) {\n    case 'FILE_CONTENTS':\n      return { ...state, activeFileContents: action.payload }\n    \n    case 'DIRECTORY_UPDATE':\n      return {...state, directoryStucture: action.payload }\n  }\n}",
  "e2ad4ba0-d83e-11e8-b410-879561d31848": "import { combineReducers } from 'redux';\n\nfunction createReducer(initialState, handlers) {\n  return function reducer(state = initialState, action) {\n    return handlers.hasOwnProperty(action.type) ? \n      handlers[action.type](state, action) : state;\n  };\n}\n\nconst rootReducer = (state = {messages: []}, action) => {\n  switch(action.type) {\n  case 'server/message':\n    console.log('Action data:', action.payload);\n    return {...state, messages: action.payload};\n  default:\n    return state;\n  }\n};\n\nconst newReducer = createReducer({}, {\n \n});\n\nexport const reducers = combineReducers({\n  rootReducer,\n  newReducer\n});\n\nexport default rootReducer;",
  "e2ad99c0-d83e-11e8-b410-879561d31848": "import { createStore, applyMiddleware } from 'redux';\nimport { reducers } from '../reducers/rootReducer';\nimport createSocketMW from 'redux-socket.io';\nimport socketIO from 'socket.io-client';\nconst io = socketIO.connect('localhost:8080');\n\n\nfunction executor(action, emit, next, dispatch) {\n  emit('action', action);\n  next(action);\n}\n\nconst socketMW = createSocketMW(io, 'server/', { execute: executor });\n\nconst store = applyMiddleware(socketMW)(createStore)(reducers);\nstore.subscribe(() => {\n  console.log('New state:', store.getState());\n});\n\nexport default store;",
  "e2adc0d0-d83e-11e8-b410-879561d31848": "// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n",
  "e2ade7e0-d83e-11e8-b410-879561d31848": "@import url(\"https://cdnjs.cloudflare.com/ajax/libs/normalize/4.2.0/normalize.min.css\");\n.chat-main {\n  position: relative;\n  height: 100%;\n  width: 100%;\n  overflow: hidden;\n  display: flex;\n  justify-content: start;\n  background-color: black;\n  color: white;\n  font-family: \"Courier New\";\n  font-size: 12px;\n}\n\n.chat-container {\n  display: flex;\n  flex-direction: column-reverse;\n}\n.chat-container .chatbar {\n  flex-grow: 1;\n  background-color: black;\n  border-top: 1px solid black;\n  display: flex;\n  flex-direction: column;\n  padding: 0.5rem;\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  align-content: center;\n  justify-content: center;\n}\n.chat-container .chatbar .chatbar-message,\n.chat-container .chatbar .chatbar-username {\n  opacity: 0.8;\n  border: 1px solid black;\n  border-radius: 5px;\n  display: flex;\n  height: 1.5rem;\n  line-height: 2.5rem;\n  margin: 1px;\n  padding: 0 0.5rem;\n}\n.chat-container .messages-container {\n  min-height: 50vh;\n  max-height: 50vh;\n  display: flex;\n  position: relative;\n}\n.chat-container .messages-container .message-system {\n  display: flex;\n  flex-direction: column;\n}\n.chat-container .messages-container .message-system .message-list-container {\n  display: flex;\n  flex-direction: column-reverse;\n  overflow-y: auto;\n  scroll-behavior: smooth;\n  margin: 0.1rem 0.1rem 0.1rem 0.1rem;\n}\n.chat-container .messages-container .message-system .message-list-container .unreverse {\n  flex-direction: column;\n}\n.chat-container .messages-container .message-system .message-list-container .unreverse .messages {\n  display: block;\n  padding: 0.2rem;\n  margin: 0rem 0rem;\n}\n.chat-container .messages-container .message-system .message-list-container .unreverse .message-system {\n  width: 100%;\n  padding: 5px 20px;\n}\n.chat-container .messages-container .message-system .message-list-container .unreverse .messages-content,\n.chat-container .messages-container .message-system .message-list-container .unreverse .message-username {\n  overflow: hidden;\n  margin: 5px;\n  padding: 0 10px;\n}\n.chat-container .messages-container .message-system .message-list-container .unreverse .messages-content {\n  flex: 8;\n}\n.chat-container .messages-container .message-system .message-list-container .unreverse .message-username {\n  flex: 2;\n  font-weight: 700;\n}\n.chat-container .messages-container .message-system .message-list-container .unreverse .notifications {\n  font-weight: 600;\n  margin: 1rem 1rem 2rem 3rem;\n}\n\n.file-container {\n  display: flex;\n  flex-direction: column;\n}\n.file-container .theme-select-container {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  height: 100px;\n  background-color: rgba(0, 0, 0, 0.6);\n}\n.file-container .theme-select-container .select-text {\n  color: #EEE;\n  padding: 0rem;\n  margin: 0rem;\n}\n.file-container .theme-select-container .theme-select {\n  padding: 0.5rem;\n  margin: 0.5rem;\n}\n\n.video-main .iframe {\n  position: relative;\n  width: 100%;\n  height: 52vh;\n}\n\nbody {\n  margin: 0;\n  padding: 0;\n  font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", \"Roboto\", \"Oxygen\", \"Ubuntu\", \"Cantarell\", \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\ncode {\n  font-family: source-code-pro, Menlo, Monaco, Consolas, \"Courier New\", monospace;\n}\n\n.App {\n  flex-direction: column;\n  height: 80vh;\n  width: 100vw;\n  background-color: black;\n}\n.App .component-container1 {\n  display: grid;\n  grid-template-columns: 1fr 2fr 1fr;\n  grid-template-areas: \"Filetree Video Chat\";\n}\n.App .component-container1 .Filetree-display {\n  position: relative;\n  height: 100%;\n  width: 100%;\n  grid-area: Filetree;\n  background-color: grey;\n}\n.App .component-container1 .Video-display {\n  position: relative;\n  height: 100%;\n  width: 100%;\n  grid-area: Video;\n}\n.App .component-container1 .Chat-display {\n  position: relative;\n  height: 100%;\n  width: 100%;\n  grid-area: Chat;\n}\n.App .component-container2 {\n  display: grid;\n  height: 47vh;\n  grid-template-columns: 50% 50%;\n  grid-template-areas: \"Code Terminal\";\n}\n.App .component-container2 .Code-display {\n  position: relative;\n  height: 100%;\n  width: 100%;\n  grid-area: Code;\n}\n.App .component-container2 .Terminal-display {\n  position: relative;\n  height: 100%;\n  width: 100%;\n  display: flex;\n  grid-area: Terminal;\n  background-color: grey;\n}\n\n.App-logo {\n  animation: App-logo-spin infinite 20s linear;\n  height: 40vmin;\n}\n\n.App-header {\n  background-color: #282c34;\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  font-size: calc(10px + 2vmin);\n  color: white;\n}\n\n.App-link {\n  color: #61dafb;\n}\n\n@keyframes App-logo-spin {\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n}\n\n/*# sourceMappingURL=index.css.map */\n",
  "e2afe3b0-d83e-11e8-b410-879561d31848": "{\"version\":3,\"sourceRoot\":\"\",\"sources\":[\"../scss/App.scss\",\"../scss/partials/_chat.scss\",\"../scss/partials/_fileViewer.scss\",\"../scss/partials/_video.scss\"],\"names\":[],\"mappings\":\"AAAQ;ACAR;EACE;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;;AAGF;EACE;EACA;;AAEA;EACE;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;AAEA;AAAA;EAEE;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;AAIJ;EACE;EACA;EACA;EACA;;AAEA;EACE;EACA;;AACA;EACE;EACA;EACA;EACA;EACA;;AAEA;EACE;;AACA;EACE;EACA;EACA;;AAGF;EACE;EACA;;AAGF;AAAA;EAEE;EACA;EACA;;AAGF;EACE;;AAGF;EACE;EACA;;AAGF;EACE;EACA;;;AC3FZ;EACE;EACA;;AAQA;EACE;EACA;EACA;EACA;EACA;EACA;;AAEA;EACE;EACA;EACA;;AAEF;EACE;EACA;;;ACvBJ;EACE;EACA;EACA;;;AHAJ;EACE;EACA;EACA;EAGA;EACA;;;AAGF;EACE;;;AAMF;EACE;EACA;EACA;EACA;;AAEA;EACE;EACA;EACA,qBACE;;AAEF;EACE;EACA;EACA;EACA;EACA;;AAIF;EACE;EACA;EACA;EACA;;AAGF;EACE;EACA;EACA;EACA;;AAIJ;EACE;EACA;EACA;EACA,qBACE;;AAEF;EACE;EACA;EACA;EACA;;AAGF;EACE;EACA;EACA;EACA;EACA;EACA;;;AAMN;EACE;EACA;;;AAGF;EACE;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;;AAGF;EACE;;;AAGF;EACE;IACE;;EAEF;IACE\",\"file\":\"index.css\"}",
  "e2b00ac0-d83e-11e8-b410-879561d31848": "@import url(\"https://cdnjs.cloudflare.com/ajax/libs/normalize/4.2.0/normalize.min.css\");\n@import 'partials/chat';\n@import 'partials/fileViewer';\n@import 'partials/video';\n\nbody {\n  margin: 0;\n  padding: 0;\n  font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", \"Roboto\", \"Oxygen\",\n    \"Ubuntu\", \"Cantarell\", \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\",\n    sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\ncode {\n  font-family: source-code-pro, Menlo, Monaco, Consolas, \"Courier New\",\n    monospace;\n}\n\n\n\n.App {\n  flex-direction: column;\n  height: 80vh;\n  width: 100vw;\n  background-color: black;\n\n  .component-container1 {\n    display: grid;\n    grid-template-columns: 1fr 2fr 1fr;\n    grid-template-areas: \n      \"Filetree Video Chat\";\n\n    .Filetree-display {\n      position: relative;\n      height: 100%;\n      width: 100%; \n      grid-area: Filetree;\n      background-color: grey;\n\n    }\n\n    .Video-display {\n      position: relative;\n      height: 100%;\n      width: 100%; \n      grid-area: Video;\n    }\n  \n    .Chat-display {\n      position: relative;\n      height: 100%;\n      width: 100%; \n      grid-area: Chat;\n    }\n  }\n\n  .component-container2 {\n    display: grid;\n    height: 47vh;\n    grid-template-columns: 50% 50%;\n    grid-template-areas:\n      \"Code Terminal\";\n\n    .Code-display {\n      position: relative;\n      height: 100%;\n      width: 100%; \n      grid-area: Code;\n    }\n\n    .Terminal-display {\n      position: relative;\n      height: 100%;\n      width: 100%; \n      display: flex;\n      grid-area: Terminal;\n      background-color: grey;\n    }\n  }\n}\n\n\n.App-logo {\n  animation: App-logo-spin infinite 20s linear;\n  height: 40vmin;\n}\n\n.App-header {\n  background-color: #282c34;\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  font-size: calc(10px + 2vmin);\n  color: white;\n}\n\n.App-link {\n  color: #61dafb;\n}\n\n@keyframes App-logo-spin {\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n}\n",
  "e2b031d0-d83e-11e8-b410-879561d31848": "@import 'App';",
  "e2b0ce10-d83e-11e8-b410-879561d31848": ".chat-main {\n  position: relative;\n  height: 100%;\n  width: 100%; \n  overflow: hidden;\n  display: flex;\n  justify-content: start;\n  background-color: black;\n  color: white;\n  font-family: 'Courier New';\n  font-size: 12px;\n\n}\n.chat-container {\n  display: flex;\n  flex-direction: column-reverse;\n\n  .chatbar {\n    flex-grow: 1;\n    background-color: black;\n    border-top: 1px solid black;\n    display: flex;\n    flex-direction: column;\n    padding: 0.5rem;\n    position: absolute;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    align-content: center;\n    justify-content: center;\n\n    .chatbar-message,\n    .chatbar-username {\n      opacity: 0.8;\n      border: 1px solid black;\n      border-radius: 5px;\n      display: flex;\n      height: 1.5rem;\n      line-height: 2.5rem;\n      margin: 1px;\n      padding: 0 0.5rem;\n    }\n  }\n\n  .messages-container {\n    min-height: 50vh;\n    max-height: 50vh;\n    display: flex;\n    position: relative;\n    \n    .message-system {\n      display: flex;\n      flex-direction: column;\n      .message-list-container {\n        display: flex;\n        flex-direction: column-reverse;\n        overflow-y: auto;\n        scroll-behavior: smooth;\n        margin: 0.1rem 0.1rem 0.1rem 0.1rem;\n        \n        .unreverse {\n          flex-direction: column;\n          .messages {\n            display: block;\n            padding: 0.2rem;\n            margin: 0rem 0rem;\n          }\n          \n          .message-system {\n            width: 100%;\n            padding: 5px 20px;\n          }\n          \n          .messages-content,\n          .message-username {\n            overflow: hidden;\n            margin: 5px;\n            padding: 0 10px;\n          }\n          \n          .messages-content {\n            flex: 8;\n          }\n          \n          .message-username {\n            flex: 2;\n            font-weight: 700;\n          }\n          \n          .notifications {\n            font-weight: 600;\n            margin: 1rem 1rem 2rem 3rem;\n          }\n        }\n      }\n    }\n  }\n  \n}\n\n\n\n\n",
  "e2b2f0f0-d83e-11e8-b410-879561d31848": ".file-container {\n  display: flex;\n  flex-direction: column;\n\n\n\n  .ReactCodeMirror, .CodeMirror {\n\n  }\n\n  .theme-select-container {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    height: 100px;\n    background-color: rgba(0,0,0,0.6);\n    \n    .select-text {\n      color: #EEE;\n      padding: 0rem;\n      margin: 0rem;\n    }\n    .theme-select {\n      padding: 0.5rem;\n      margin: 0.5rem;\n    }\n  }\n}",
  "e2b31800-d83e-11e8-b410-879561d31848": ".video-main {\n\n  .iframe {\n    position: relative;\n    width: 100%;\n    height: 52vh;\n  }\n}",
  "e2b4ecc0-d83e-11e8-b410-879561d31848": "\n{  \n  \"restartable\": \"rs\",\n  \"ignore\": [\n    \".git\",\n    \"node_modules/**/node_modules\"\n  ],\n  \"verbose\": true,\n  \"watch\": [\n    \"./client/\",\n    \"./server/\" \n  ],\n  \"ext\": \"js json\"\n}",
  "e2b561f0-d83e-11e8-b410-879561d31848": "{\n  \"name\": \"final\",\n  \"version\": \"1.0.0\",\n  \"description\": \"First commit\",\n  \"main\": \"client/src/index.js\",\n  \"scripts\": {\n    \"update-all\": \"concurrently 'npm update' 'npm update --prefix server' 'npm update --prefix client'\",\n    \"install-all\": \"concurrently 'npm install' 'npm install --prefix server' 'npm install --prefix client'\",\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n    \"server\": \"nodemon server/server.js\",\n    \"react\": \"npm start --prefix client\",\n    \"start\": \"concurrently --kill-others-on-fail 'npm run react' 'npm run server'\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/Benji-Leboe/final.git\"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"bugs\": {\n    \"url\": \"https://github.com/Benji-Leboe/final/issues\"\n  },\n  \"homepage\": \"https://github.com/Benji-Leboe/final#readme\",\n  \"dependencies\": {\n    \"concurrently\": \"~4.0.1\",\n    \"nodemon\": \"~1.18.4\",\n    \"react-codemirror\": \"^1.0.0\"\n  },\n  \"devDependencies\": {\n    \"remote-redux-devtools\": \"~0.5.13\"\n  },\n  \"engines\": {\n    \"node\": \"10.11.0\",\n    \"npm\": \"6.4.1\"\n  }\n}\n",
  "e2bab920-d83e-11e8-b410-879561d31848": "const fs = require('fs');\n// const stream = fs.createWriteStream('./testFile.js', {flags:'a'});\nconst { StringDecoder } = require('string_decoder');\nconst decoder = new StringDecoder('utf8');\nconst util = require('util');\nconst path = require('path');\nconst uuid = require('uuid/v1');\n\nconst rootDir = path.join(__dirname, '..');\n\n//Create promise.each function that takes array and resolver function\nPromise.each = async function(arr, fn) {\n  //collect resolved promises\n  let resolved = [];\n  //check for valid array\n  if (!Array.isArray(arr)) return Promise.reject('Must pass an array to .each');\n  //for each promise, resolve and push result\n  for (let promise of arr) await fn(promise)\n  .then(async (result) => {\n    await resolved.push(result);\n  }).catch((err) => {\n    throw err;\n  })\n  return await resolved;\n  //return array for resolved promises\n}\n\n//function to resolve promises for Promise.each()\nfunction resolver(promise) {\n  return Promise.resolve(promise);\n}\n\n//makes filepath from __dirname relative\nfunction makeRelative(fpath, root) {\n  //split root and filepath to compare\n  let pathArr = fpath.split('/');\n  let rootArr = root.split('/');\n\n  //compare path and root nodes\n  let relative = pathArr.filter((node, i) => {\n    return node !== rootArr[i];\n  });\n  //return relative path as string\n  return relative.join('/');\n}\n\n//returns new promise with Buffer object for async file read\nfunction readFile(target) {\n  return new Promise((resolve, reject) => {\n    fs.readFile(target, function(err, content) {\n      if (err) reject(err);\n      resolve(content);\n    });\n  });\n}\n\n//reads file and stores id and result in fileStore object as key: value pair\nasync function fileReader(root, fpath, target) {\n  //concat fpath array and join to root to make absolute\n  let filePath = fpath.join('/');\n  let readTarget = path.join(root, filePath, target);\n\n  //return new promise with decoded file\n  return readFile(readTarget).then(async (result) => {\n    return await decoder.write(result);\n  }).catch((err) => {\n    throw err;\n  });\n}\n\nasync function makeJSON(array) {\n  //generates JSON object representing directory structure from array\n  let promises = [];\n  let fileIDs = [];\n\n  let dirObj = {};\n  let fileObj = {};\n\n  for (let file of array) {\n    //set variable for object traversal\n    let current = dirObj;\n    //split filepath and assign filename to variable\n    let fpath = file.split('/');\n    let targetFile = fpath.pop();\n    //list of files and extensions to ignore\n    const ignore = ['.ico', '.png', '.jpg', '.DS_Store', '.svg', 'node_modules', 'package-lock.json', '.git', '.scssc'];\n    const check = new RegExp(ignore.join('|')).test(targetFile);\n\n    //check for valid file extensions\n    if (!check) {\n      //check to see if files are in subdirectory\n      if (fpath.length > 0) {\n        //for each node assign child and move one level deeper\n        fpath.forEach(async (node, i) => {\n          console.log('Current:', current[node]);\n          current[node] ? current[node][fpath[i + i]] : current[node] = {};\n          current = current[node];\n          console.log('Next:', current[node]);\n          //if last node: \n          //1) assign file and hash, and \n          //2) read file and push returned promise to promises array\n          if(i === fpath.length - 1) {\n            let fileID = uuid();\n            await promises.push(fileReader(rootDir, fpath, targetFile));\n            await fileIDs.push(fileID);\n            current[targetFile] = fileID;\n          }\n        });\n      //if child of root dir append to root object and do same as above\n      } else {\n        let fileID = uuid();\n        await promises.push(fileReader(rootDir, fpath, targetFile));\n        await fileIDs.push(fileID);\n        current[targetFile] = fileID;\n        \n      }\n    }\n    console.log(util.inspect(dirObj, false, null));\n  }\n  //resolve all promises in array \n  let resolved = await Promise.each(await promises, resolver);\n  \n  resolved.forEach((res, i) => {\n    fileObj[fileIDs[i]] = res;\n  });\n  fs.writeFile('./content.json', JSON.stringify(fileObj), (err) => {\n    if (err) throw err;\n  });\n  fs.writeFile('./directory.json', JSON.stringify(dirObj), (err) => {\n    if (err) throw err;\n  });\n  //return directory tree as a promise\n  return dirObj;\n}\n\n//when readDir is complete, call function to build directory and file content objects\nfunction done() {\n  return (err, res) => {\n    if (err) throw err;\n    makeJSON(res);\n  }\n}\n\n//takes directory path and callback\nconst readDir = (dir, done) => {\n  // collects results\n  let results = [];\n  // reads directory passed to readDir()\n  fs.readdir(dir, function(err, items) {\n    //returns error if err\n    if (err) return done(err);\n    //init index counter for current dir\n    let i = 0;\n    //magical recursive IIFE\n    return (function next() {\n      let item = items[i++];\n      // console.log('Item:', item);\n      //return when dir is walked\n      if (!item) return done(null, results);\n      //add to filepath\n      item = path.join(dir, item);\n      //stat returns quantifiable properties of item, used here to parse files vs. dirs\n      return fs.stat(item, (err, stat) => {\n        if (stat && stat.isDirectory()) {\n          if (item && !item.includes('node_modules') && !item.includes('.git')) {\n            //if dir call self recursively for each subdir\n            return readDir(item, function(err, res) {\n              results = [...results, ...res];\n              return next();\n            });\n          } else {\n            //if node_modules or .git trigger recursion\n            return next();\n          }\n        } else {\n          //if files push to results\n          results.push(makeRelative(item, rootDir));\n          return next();\n        }\n      });\n    })();\n  });\n};\n\nreadDir(rootDir, done());",
  "e2bd9f50-d83e-11e8-b410-879561d31848": "const winston = require(\"winston\");\n\nconst level = process.env.LOG_LEVEL || 'debug';\n\nconst logger = winston.createLogger({\n    transports: [\n        new winston.transports.Console({\n            level: level,\n            timestamp: function () {\n                return (new Date()).toISOString();\n            }\n        })\n    ]\n});\n\nmodule.exports = logger;",
  "e2be1480-d83e-11e8-b410-879561d31848": "{\n  \"name\": \"server\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"express\": \"~4.16.4\",\n    \"mime-types\": \"~2.1.21\",\n    \"socket.io\": \"~2.1.1\",\n    \"uuid\": \"~3.3.2\"\n  },\n  \"devDependencies\": {\n    \"morgan\": \"~1.9.1\",\n    \"winston\": \"~3.1.0\"\n  }\n}\n",
  "e2be89b0-d83e-11e8-b410-879561d31848": "//const ENV = require ('dotenv');\nconst app       = require('express')();\nconst http      = require('http').Server(app);\nconst path      = require('path');\nconst fs        = require('fs');\nconst morgan    = require('morgan');\n\nconst PORT      = 8080;\n\nconst server    = http.listen(PORT, () => console.log('App listening on ' + PORT));\n\nconst io        = require('socket.io')(server);\n\nconst rootPath  = path.join(__dirname, '..');\nconst buildPath = path.join(rootPath, 'client/build');\n\napp.use(morgan('dev', {\n  skip: (req, res) => {\n      return res.statusCode < 400;\n  }, stream: process.stderr\n}));\napp.use(morgan('dev', {\n  skip: (req, res) => {\n      return res.statusCode >= 400;\n  }, stream: process.stdout\n}));\n\napp.get('/*', (req, res) => {\n  res.statusCode(200).json({ express: 'successful connection to express' })\n});\n\nio.on('connection', (socket) => {\n  \n  const clients = [];\n  console.log(`Socket ${socket.id} connected`);\n  clients.push(socket.id);\n  console.log(clients);\n  \n  socket.on('action', (action) => {\n\n    const actions = {\n      'server/message': (payload) => {\n        console.log(\"Actions triggered\");\n        io.emit('message', payload);\n      },\n      'server/new_connection': (payload) => {\n        console.log('Server message:', payload);\n      }\n    }\n\n    function defaultAction(type, payload) {\n      console.log(\"Default action triggered\");\n      socket.broadcast.emit(type, payload);\n    }\n\n    console.log('Action received:', action);\n    const { type, payload } = action;\n    actions[type] ? actions[type](payload) : defaultAction(type, payload);\n\n  });\n\n  socket.on('disconnect', () => {\n    console.log(`Socket ${socket.id} disconnected`)\n    let clientIndex = clients.findIndex(e => e === socket.id);\n    clients.splice(clientIndex, 1);\n    console.log(clients);\n  });\n\n  socket.on('error', (err) => {\n    console.log(err, `from ${socket.id}`);\n  });\n});\n"
}